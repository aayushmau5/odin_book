# User

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  displayImage: String
  posts: [Post]
  friends: [User]
  friendRequestTo: [User]
  friendRequestBy: [User]
}

type Token {
  user: User
  token: String
}

type FriendRequests {
  id: ID!
  friendRequestTo: [User]
  friendRequestBy: [User]
}

type Friends {
  friends: [User]
}

# Post

type Post {
  id: ID!
  text: String
  image: String
  createdAt: String!
  likes: [User]
  comments: [Comment]
  author: User!
}

type LikeDislike {
  likedBy: [User]
  likes: Int!
}

type Comment {
  id: ID!
  text: String
  post: Post
  inReplyTo: Comment
  createdAt: String!
  author: User
}

# Queries and Mutations

type Query {
  getAllUsers: [User]
  getUser(userId: String): User
  getUserByEmail(email: String!): User
  searchUser(query: String): [User]
  login(email: String, password: String): Token
  oauthLogin(idToken: String!): Token
  getAllPosts: [Post]
  getAllPostsByUser(userId: String!): [Post]
  getFeed: [Post]
}

type Mutation {
  signUp(email: String, password: String): Token
  oauthSignUp(idToken: String!): Token
  createUser(
    email: String!
    firstName: String!
    lastName: String!
    displayImage: String
  ): User
  updateProfile(
    firstName: String!
    lastName: String!
    displayImage: String
  ): User
  deleteCurrentUser: User
  createPost(text: String, image: String): Post
  likePost(postId: String): LikeDislike
  dislikePost(postId: String): LikeDislike
  createCommentOnPost(postId: String, text: String): Comment
  createCommentOnComment(
    postId: String
    commentId: String
    text: String
  ): Comment
  deleteComment(commentId: String): Comment
  deletePost(postId: String): Post
  sendFriendRequest(userId: String): FriendRequests
  cancelFriendRequest(userId: String): FriendRequests
  acceptFriendRequest(userId: String): Friends
  unfriendUser(userId: String): Friends
}
